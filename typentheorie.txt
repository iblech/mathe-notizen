=== Ein Nutzen von HoTT vs. gewöhnlicher Typentheorie

http://dlicata.web.wesleyan.edu/pubs/l13jobtalk/l13jobtalk.pdf
Folie 96


=== Der bestimmte Artikel ("the")

Corfield: https://link.springer.com/article/10.1007/s11229-017-1569-7


=== Rund um Axiom K

* https://jesper.sikanda.be/files/thesis-final-digital.pdf


=== Modale Typentheorie

https://dl.acm.org/doi/pdf/10.1145/3341711?download=true


=== Setoide

* 4+1 Varianten von Setoiden: http://www.cs.nott.ac.uk/~pszvc/publications/Setoids_JFP_2003.pdf

* Kompilieren hin zu Setoiden: Martin Hofmann, Elimination of extensionality in
  Martin-Löf type theory.


=== Type in Type

* Direkter Beweis der Inkonsistenz von Type in Type, induktive Typen annehmend:
  http://www.cs.nott.ac.uk/~psztxa/g53cfr/l20.html/l20.html (Idee:
  Mengenuniversum aufbauen, dann Russell nachahmen)

* Die Annahme von Type in Type hatte zu folgenden fehlerhaften Ergebnissen
  geführt:

  1. Konsistenz von Type in Type
  2. etwas zu Modalitäten von Mike

  https://proofassistants.stackexchange.com/questions/1219/has-anyone-ever-accidentally-proven-a-false-theorem-with-type-in-type


=== Übersetzungen von Typentheorie nach Typentheorie

https://www.pédrot.fr/slides/cpp-01-17.pdf
The Next 700 Syntactic Models of Type Theory


=== Epis in der Kategorie der Typen

* Epis in Set: Fasern bewohnt

* Epis in Type: Fasern azyklisch (d.h. Einhängung ist trivial)

* https://tdejong.com/talks/TYPES-2023.pdf


=== Propositionale Abschneidung

* Habe: (f : ℕ → ℕ) → ||Σn. f(n) = 0|| → (Σn. f(n) = 0).

  Folgendes stimmt also jeweils NICHT:

  Myth I. Propositions in HoTT/UF don't carry information.

  Myth II. The propositional truncation ∥ X ∥ erases all the information that
  is available in the type X.

  Myth III. You can never "exit" propositional truncations, in the sense that
  there never is a function ∥ X ∥ → X unless X is a proposition.

  https://mathstodon.xyz/@MartinEscardo/111014413939196037

* https://drops.dagstuhl.de/storage/00lipics/lipics-vol039-types2014/LIPIcs.TYPES.2014.111/LIPIcs.TYPES.2014.111.pdf
  Zu Abbildungen ||A|| → B wenn B keine Proposition ist.


=== Rekursoren und pattern matching

* https://www.xn--pdrot-bsa.fr/slides/jnim-03-24.pdf#page=142

  Die Funktion even? : ℕ → Bool ist NICHT intensionally recursor-encodable.


=== Theorien von Beweisassistenten

https://proofassistants.stackexchange.com/questions/1201/proof-theoretic-comparison-table


=== Setoid-Hölle

* Schlimm nicht weil man ein paar Kongruenzen beweisen muss. Das muss mab so
  oder so. Sondern:

  * Weil Kongruenzen, die leicht inferierbar sein sollten, nicht automatisch
    inferiert werden. "f(g(x))"

  * Besonders dramatisch bei Familien, die von Setoiden indiziert werden.

  https://proofassistants.stackexchange.com/a/927/607

* Es gibt Setoid Type Theory, "Observational Equality: Now For Good", XTT und
  natürlich Millys 2TT. Wie verhalten die sich zueinander?


=== Extensionale Typentheorie

* https://www.xn--pdrot-bsa.fr/slides/birmingham-06-20.pdf#page=77

* Eliminating Reflection from Type Theory: Übersetzung von ETT zu ITT + UIP +
  funext. Benötigt die ETT-Ableitungen. Typechecking in ETT ist bekanntermaßen
  nicht entscheidbar, nur die Korrektheit von vollständigen Ableitungsbäumen
  ist es.

* CT ist inkonsistent mit funext, sofern Choice für ℕ → ℕ vorhanden ist.

  Denn sei F : (ℕ → ℕ) → ℕ eine Funktion, die Funktionen sie berechnende Codes
  zuordnet. Dann f = g punktweise genau dann, wenn Ff = Fg. (Für die Richtung
  "⇒" benötigen wir funext.)

  Damit ist aber das Halteproblem entscheidbar. Und das beißt sich mit CT.

* Entsprechend ist auch CT_Σ mit funext inkompatibel (ohne Choice, da schon
  eingebaut).


=== Nonstandard

* Von Zoltan in seiner Doktorarbeit gemacht: Kapitel 4 von
  https://pure.manchester.ac.uk/ws/portalfiles/portal/146395090/FULL_TEXT.PDF

  https://github.com/zaklogician/agda-ist-algebra/blob/master/src/Base.agda


=== Sinn und Unsinn der η-Regeln (eta-Regeln)

https://www.wellesu.com/10.1017/bsl.2019.21


=== Neue Möglichkeit, initiale Algebren zu bauen, ohne transfinite Iteration

https://arxiv.org/pdf/2405.09504


=== Normalisierung und decidability

* Thierry: https://arxiv.org/pdf/2103.04287
  via Artin-Gluing


=== Typentheorie vs. traditionelle Fundierung

* Andrej in https://mathoverflow.net/questions/332918/what-do-we-gain-with-higher-order-logics:
  "For large scale projects the overriding concern becomes proof engineering:
  how to organize large libraries of definitions and theorems, how to search
  them, how to write proofs so that they are robust with respect to small
  changes, etc. Traditional logic has almost nothing to say about these topics,
  and consequently does not influence much the choice of formalism used in
  proof assistants."
